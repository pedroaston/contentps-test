name = "contentps-test"

[defaults]
builder = "exec:go"
runner = "local:exec"

[builders."docker:go"]
enabled = true
go_version = "1.16"
build_base_image = "golang:1.16-buster"
module_path = "github.com/libp2p/test-plans/dht"
exec_pkg = "."

[builders."docker:go".dockerfile_extensions]
pre_mod_download = "RUN go env -w GOPRIVATE=github.com/pedroaston\n RUN git config --global url.\"https://pedroaston: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@github.com\".insteadOf \"https://github.com\""

# TODO: exec:go is not ready yet
[builders."exec:go"]
enabled = true
module_path = "github.com/libp2p/test-plans/dht"
exec_pkg = "."

[runners."local:docker"]
enabled = true

[runners."local:exec"]
enabled = true

[runners."cluster:swarm"]
enabled = true

[runners."cluster:k8s"]
enabled = true

[[testcases]]
name = "normal-scout-test"
instances = { min = 16, max = 10000, default = 16 }

  [testcases.params]
  timeout_secs = { type = "int", desc = "test timeout", unit = "seconds", default = 300 }
  latency      = { type = "int", desc = "latency between peers", unit = "ms", default = 0 }
  auto_refresh = { type = "bool", desc = "enable DHT routing table autorefresh", unit = "bool", default = true }
  random_walk  = { type = "bool", desc = "run 5 random walks before the test", unit = "bool", default = false }
  bucket_size  = { type = "int", desc = "routing table bucket size", unit = "peers", default = 2 }
  alpha        = { type = "int", desc = "dht concurrency parameter", unit = "int", default = 3 }
  beta         = { type = "int", desc = "dht resiliency parameter", unit = "int", default = 3 }
  client_mode  = { type = "bool", desc = "all undialable nodes are clients", unit = "bool", default = "false" }
  datastore    = { type = "int", desc = "datastore type", unit = "int", default = 0 }
  peer_id_seed = { type = "int", desc = "seed used to generate all peer IDs - must be smaller than MaxInt-instances", default = 0 }
  bootstrapper = { type = "bool", desc = "node is a bootstrapper", unit = "bool", default = false}
  bs_strategy  = { type = "int", desc = "the identifier for the nodes bootstrap strategy", unit = "int", default = 0}
  undialable   = { type = "bool", desc = "node is undialable", unit = "bool", default = false}
  group_order  = { type = "int", desc = "the order in which the node is bootstrapped, may be tied with another node", unit ="int", default = 0}
  expect_dht   = { type = "bool", desc = "the node expects to be a dht server", unit ="bool", default = true}

  n_find_peers = { type = "int", desc = "number of peers to find", unit = "peers", default = 1 }

[[testcases]]
name = "fast-test"
instances = { min = 16, max = 10000, default = 16 }

  [testcases.params]
  timeout_secs = { type = "int", desc = "test timeout", unit = "seconds", default = 300 }
  latency      = { type = "int", desc = "latency between peers", unit = "ms", default = 0 }
  auto_refresh = { type = "bool", desc = "enable DHT routing table autorefresh", unit = "bool", default = true }
  random_walk  = { type = "bool", desc = "run 5 random walks before the test", unit = "bool", default = false }
  bucket_size  = { type = "int", desc = "routing table bucket size", unit = "peers", default = 2 }
  alpha        = { type = "int", desc = "dht concurrency parameter", unit = "int", default = 3 }
  beta         = { type = "int", desc = "dht resiliency parameter", unit = "int", default = 3 }
  client_mode  = { type = "bool", desc = "all undialable nodes are clients", unit = "bool", default = "false" }
  datastore    = { type = "int", desc = "datastore type", unit = "int", default = 0 }
  peer_id_seed = { type = "int", desc = "seed used to generate all peer IDs - must be smaller than MaxInt-instances", default = 0 }
  bootstrapper = { type = "bool", desc = "node is a bootstrapper", unit = "bool", default = false}
  bs_strategy  = { type = "int", desc = "the identifier for the nodes bootstrap strategy", unit = "int", default = 0}
  undialable   = { type = "bool", desc = "node is undialable", unit = "bool", default = false}
  group_order  = { type = "int", desc = "the order in which the node is bootstrapped, may be tied with another node", unit ="int", default = 0}
  expect_dht   = { type = "bool", desc = "the node expects to be a dht server", unit ="bool", default = true}

  n_find_peers = { type = "int", desc = "number of peers to find", unit = "peers", default = 1 }

[[testcases]]
name = "subburst-scout-test"
instances = { min = 16, max = 10000, default = 16 }

  [testcases.params]
  timeout_secs = { type = "int", desc = "test timeout", unit = "seconds", default = 300 }
  latency      = { type = "int", desc = "latency between peers", unit = "ms", default = 0 }
  auto_refresh = { type = "bool", desc = "enable DHT routing table autorefresh", unit = "bool", default = true }
  random_walk  = { type = "bool", desc = "run 5 random walks before the test", unit = "bool", default = false }
  bucket_size  = { type = "int", desc = "routing table bucket size", unit = "peers", default = 2 }
  alpha        = { type = "int", desc = "dht concurrency parameter", unit = "int", default = 3 }
  beta         = { type = "int", desc = "dht resiliency parameter", unit = "int", default = 3 }
  client_mode  = { type = "bool", desc = "all undialable nodes are clients", unit = "bool", default = "false" }
  datastore    = { type = "int", desc = "datastore type", unit = "int", default = 0 }
  peer_id_seed = { type = "int", desc = "seed used to generate all peer IDs - must be smaller than MaxInt-instances", default = 0 }
  bootstrapper = { type = "bool", desc = "node is a bootstrapper", unit = "bool", default = false}
  bs_strategy  = { type = "int", desc = "the identifier for the nodes bootstrap strategy", unit = "int", default = 0}
  undialable   = { type = "bool", desc = "node is undialable", unit = "bool", default = false}
  group_order  = { type = "int", desc = "the order in which the node is bootstrapped, may be tied with another node", unit ="int", default = 0}
  expect_dht   = { type = "bool", desc = "the node expects to be a dht server", unit ="bool", default = true}

  n_find_peers = { type = "int", desc = "number of peers to find", unit = "peers", default = 1 }

[[testcases]]
name = "eventburst-scout-test"
instances = { min = 16, max = 10000, default = 16 }

  [testcases.params]
  timeout_secs = { type = "int", desc = "test timeout", unit = "seconds", default = 300 }
  latency      = { type = "int", desc = "latency between peers", unit = "ms", default = 0 }
  auto_refresh = { type = "bool", desc = "enable DHT routing table autorefresh", unit = "bool", default = true }
  random_walk  = { type = "bool", desc = "run 5 random walks before the test", unit = "bool", default = false }
  bucket_size  = { type = "int", desc = "routing table bucket size", unit = "peers", default = 2 }
  alpha        = { type = "int", desc = "dht concurrency parameter", unit = "int", default = 3 }
  beta         = { type = "int", desc = "dht resiliency parameter", unit = "int", default = 3 }
  client_mode  = { type = "bool", desc = "all undialable nodes are clients", unit = "bool", default = "false" }
  datastore    = { type = "int", desc = "datastore type", unit = "int", default = 0 }
  peer_id_seed = { type = "int", desc = "seed used to generate all peer IDs - must be smaller than MaxInt-instances", default = 0 }
  bootstrapper = { type = "bool", desc = "node is a bootstrapper", unit = "bool", default = false}
  bs_strategy  = { type = "int", desc = "the identifier for the nodes bootstrap strategy", unit = "int", default = 0}
  undialable   = { type = "bool", desc = "node is undialable", unit = "bool", default = false}
  group_order  = { type = "int", desc = "the order in which the node is bootstrapped, may be tied with another node", unit ="int", default = 0}
  expect_dht   = { type = "bool", desc = "the node expects to be a dht server", unit ="bool", default = true}

  n_find_peers = { type = "int", desc = "number of peers to find", unit = "peers", default = 1 }